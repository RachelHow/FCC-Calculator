{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","isOperator","endsWithOperator","equalsStyle","position","height","bottom","props","_this","Object","_Users_rachel_Downloads_R_GitHub_Archive_GitHub_FCC_Calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_rachel_Downloads_R_GitHub_Archive_GitHub_FCC_Calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_rachel_Downloads_R_GitHub_Archive_GitHub_FCC_Calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","maxDigitWarning","setState","currentVal","prevVal","state","setTimeout","handleEvaluate","includes","expression","formula","test","slice","replace","answer","Math","round","eval","toString","evaluated","handleOperators","e","target","value","handleNumbers","length","handleDecimal","clearButton","currentSign","lastClicked","react__WEBPACK_IMPORTED_MODULE_5___default","className","Formula","Output","currentValue","Buttons","evaluate","operators","numbers","decimal","Component","id","onClick","style"],"mappings":"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","file":"static/js/main.0b471be4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport './App.css';\n\nconst isOperator = /[x/+-]/,\n      endsWithOperator = /[x/+-]$/,\n      equalsStyle = {\n        position: 'absolute',\n        height: 130,\n        bottom: 0\n      };\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentVal: '0',\n      prevVal: '0',\n      formula: '',\n      currentSign: 'pos',\n      lastClicked: ''\n    }\n  }\n\n  maxDigitWarning = () => {\n    this.setState({\n      currentVal: 'Digit Limit Met',\n      prevVal: this.state.currentVal\n    });\n    setTimeout( () => this.setState({\n      currentVal: this.state.prevVal\n    }), 1000);\n  }\n\n  handleEvaluate = () => {\n    if (!this.state.currentVal.includes('Limit')) {\n      let expression = this.state.formula;\n      if (endsWithOperator.test(expression)) \n      expression = expression.slice(0, -1);\n      expression = expression.replace(/x/g, \"*\").replace(/‑/g, \"-\");\n      let answer = Math.round(1000000000000 * eval(expression)) / 1000000000000;\n      this.setState({\n        currentVal: answer.toString(),\n        formula: expression.replace(/\\*/g, '⋅').replace(/-/g, '‑') + '=' + answer,\n        prevVal: answer,\n        evaluated: true\n      });\n      \n    }\n  }\n\n  handleOperators = (e) => { \n    if (!this.state.currentVal.includes('Limit')) {\n      this.setState({\n        currentVal: e.target.value, \n        evaluated: false\n      });\n      if (this.state.formula.includes('=')) {\n        this.setState({\n          formula: this.state.prevVal + e.target.value\n        });\n      } else {\n        this.setState({\n          prevVal: !isOperator.test(this.state.currentVal) ? \n            this.state.formula : \n            this.state.prevVal,\n          formula: !isOperator.test(this.state.currentVal) ? \n            this.state.formula += e.target.value : \n            this.state.prevVal += e.target.value\n        });\n      }\n    }\n  }\n\n  handleNumbers = (e) => {\n    if (!this.state.currentVal.includes('Limit')) {\n      this.setState({\n        evaluated: false\n      })\n      if (this.state.currentVal.length > 15) {\n        this.maxDigitWarning();\n      } else if (this.state.evaluated === true) {\n        this.setState({\n          currentVal: e.target.value,\n          formula: e.target.value !== '0' ? e.target.value : '',\n        });\n      } else {\n        this.setState({\n          currentVal: \n            this.state.currentVal === '0' || \n            isOperator.test(this.state.currentVal) ? \n            e.target.value : this.state.currentVal + e.target.value,\n          formula:  \n            this.state.currentVal === '0' && e.target.value === '0' ?\n            this.state.formula : \n            /([^.0-9]0)$/.test(this.state.formula) ? \n            this.state.formula.slice(0, -1) + e.target.value :\n            this.state.formula + e.target.value,\n        });\n      }\n    }\n  }\n\n  handleDecimal = () => {\n    if (this.state.evaluated === true) {\n      this.setState({\n        currentVal: '0.',\n        formula: '0.',\n        evaluated: false});\n    } else if (!this.state.currentVal.includes('.') &&\n      !this.state.currentVal.includes('Limit')) {\n      this.setState({evaluated: false})\n      if (this.state.currentVal.length > 15) {\n        this.maxDigitWarning();\n      } else if (endsWithOperator.test(this.state.formula) || \n        (this.state.currentVal === '0' && this.state.formula === '')) {\n        this.setState({\n          currentVal: '0.',\n          formula: this.state.formula + '0.'\n        });         \n      } else {\n        this.setState({\n          currentVal: this.state.formula.match(/(-?\\d+\\.?\\d*)$/)[0] + '.',\n          formula: this.state.formula + '.',\n        });\n      }\n    }\n  }\n  \n  clearButton = () => {\n    this.setState({\n      currentVal: '0',\n      prevVal: '0',\n      formula: '',\n      currentSign: 'pos',\n      lastClicked: ''\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='calculator'>\n          <Formula \n            formula = {this.state.formula.replace(/x/g, '⋅')} \n          />\n          <Output\n            currentValue = {this.state.currentVal} \n          />\n          <Buttons \n            evaluate={this.handleEvaluate}\n            operators={this.handleOperators}\n            clearButton={this.clearButton}\n            numbers={this.handleNumbers}\n            decimal={this.handleDecimal} \n          />\n        </div>\n      </div>\n    )\n  }\n};\n\nclass Buttons extends Component {\n  render() {\n    return (\n      <div>\n        <button id=\"clear\" value='AC' onClick={this.props.clearButton} className='large-btn'>AC</button>\n        <button id=\"divide\" value='/' onClick={this.props.operators}>/</button>\n        <button id=\"multiply\" value='x' onClick={this.props.operators}>x</button>\n        <button id=\"seven\" value='7' onClick={this.props.numbers}>7</button>\n        <button id=\"eight\" value='8' onClick={this.props.numbers}>8</button>\n        <button id=\"nine\" value='9' onClick={this.props.numbers}>9</button>\n        <button id=\"subtract\" value='-' onClick={this.props.operators}>-</button>\n        <button id=\"four\" value='4' onClick={this.props.numbers}>4</button>\n        <button id=\"five\" value='5' onClick={this.props.numbers}>5</button>\n        <button id=\"six\" value='6' onClick={this.props.numbers}>6</button>\n        <button id=\"add\" value='+' onClick={this.props.operators}>+</button>\n        <button id=\"one\" value='1' onClick={this.props.numbers}>1</button>\n        <button id=\"two\" value='2' onClick={this.props.numbers}>2</button>\n        <button id=\"three\" value='3' onClick={this.props.numbers}>3</button>\n        <button id=\"zero\" value='0' onClick={this.props.numbers} className='large-btn'>0</button>\n        <button id=\"decimal\" value='.' onClick={this.props.decimal}>.</button>\n        <button id=\"equals\" value='=' onClick={this.props.evaluate} style={equalsStyle}>=</button>\n      </div>\n    );\n  }\n}\n\nclass Formula extends Component {\n  render() {\n    return (\n      <div className=\"formulaScreen\">\n        {this.props.formula}\n      </div>\n    );\n  }\n}\n\nclass Output extends Component {\n  render() {\n    return (\n      <div id=\"display\" className=\"outputScreen\">\n        {this.props.currentValue}\n      </div>\n    );\n  }\n}\n\nexport default App;"],"sourceRoot":""}